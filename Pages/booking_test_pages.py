import time
import datetime
import allure
import requests
from datetime import datetime
from Generator.generator import generated_person
from Generator.generator import FlightDate
from Generator.generator import random_city
from Pages.base_page import BasePage
from locators.booking_test_pages_locators import BookingPagesLocators as Locators
from selenium.webdriver.support.ui import WebDriverWait


class BookingTest(BasePage):

    @allure.tag("UI", "Booking", "Smoke")
    def client_way_booking_test(self):
        with allure.step("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–∞"):
            person = generated_person()
            time.sleep(11)

        with allure.step("–ó–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –±–∞–Ω–Ω–µ—Ä–∞"):
            banner = self.elements_is_visible(Locators.BannerClose)
            assert banner is not None, "–ë–∞–Ω–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
            banner.click()
            allure.attach(
                self.driver.get_screenshot_as_png(),
                name="banner_closed",
                attachment_type=allure.attachment_type.PNG
            )

        with allure.step("–í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è"):
            city_field = self.elements_is_visible(Locators.City)
            assert city_field is not None, "–ü–æ–ª–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            city_field.send_keys(random_city)
            time.sleep(1)

            city_list = self.elements_is_visible(Locators.CityList)
            assert city_list is not None, "–°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –Ω–µ –ø–æ—è–≤–∏–ª—Å—è"
            city_list.click()

        with allure.step("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç—ã –ø–æ–ª–µ—Ç–∞"):
            date_field = self.elements_is_visible(Locators.DateField)
            assert date_field is not None, "–ü–æ–ª–µ –¥–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            date_field.click()
            date_field.clear()
            date_field.send_keys(FlightDate)

            date_back_field = self.elements_is_visible(Locators.DateBacKFiled)
            assert date_back_field is not None, "–ü–æ–ª–µ –æ–±—Ä–∞—Ç–Ω–æ–π –¥–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            date_back_field.click()

        with allure.step("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç"):
            submit_btn = self.elements_is_visible(Locators.Submit)
            assert submit_btn is not None, "–ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            submit_btn.click()

            time.sleep(15)
            wait = WebDriverWait(self.driver, 15)
            wait.until(lambda driver: driver.execute_script("return document.readyState") == "complete")

        with allure.step("–ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–π—Å–æ–≤"):
            search_submit = self.elements_is_visible(Locators.SearchSubmit)
            assert search_submit is not None, "–ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            search_submit.click()

            time.sleep(10)
            allure.attach(
                self.driver.get_screenshot_as_png(),
                name="flight_search_results",
                attachment_type=allure.attachment_type.PNG
            )

        with allure.step("–í—ã–±–æ—Ä —Ä–µ–π—Å–∞"):
            first_continue = self.elements_is_visible(Locators.FirstContinue)
            assert first_continue is not None, "–ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            first_continue.click()

        with allure.step("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
            auth_button = self.elements_is_visible(Locators.AuthButton)
            assert auth_button is not None, "–ö–Ω–æ–ø–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            auth_button.click()

            email_field = self.elements_is_visible(Locators.Email)
            assert email_field is not None, "–ü–æ–ª–µ email –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            email_field.send_keys('testfsmr19@yandex.ru')

            password_field = self.elements_is_visible(Locators.Password)
            assert password_field is not None, "–ü–æ–ª–µ –ø–∞—Ä–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            password_field.send_keys('SALK28fg')

            auth_submit = self.elements_is_visible(Locators.AuthSubmit)
            assert auth_submit is not None, "–ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            auth_submit.click()

            time.sleep(1)
            wait = WebDriverWait(self.driver, 15)
            wait.until(lambda driver: driver.execute_script("return document.readyState") == "complete")

        with allure.step("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–∞"):
            with allure.step("–í–≤–æ–¥ –§–ò–û –∏ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"):
                last_name = self.elements_is_visible(Locators.LastName)
                assert last_name is not None, "–ü–æ–ª–µ —Ñ–∞–º–∏–ª–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                last_name.send_keys(person.LastName)

                first_name = self.elements_is_visible(Locators.FirstName)
                assert first_name is not None, "–ü–æ–ª–µ –∏–º–µ–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                first_name.send_keys(person.FirstName)

                middle_name = self.elements_is_visible(Locators.MiddleName)
                assert middle_name is not None, "–ü–æ–ª–µ –æ—Ç—á–µ—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                middle_name.click()

                birth_date = self.elements_is_visible(Locators.BirthDate)
                assert birth_date is not None, "–ü–æ–ª–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                birth_date.send_keys(person.BirthDate)

            with allure.step("–í—ã–±–æ—Ä –ø–æ–ª–∞"):
                gender = self.elements_is_visible(Locators.Gender)
                assert gender is not None, "–ü–æ–ª–µ –ø–æ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                gender.click()

                time.sleep(1)
                wait = WebDriverWait(self.driver, 15)
                wait.until(lambda driver: driver.execute_script("return document.readyState") == "complete")

                gender_random = self.elements_is_visible(Locators.GenderRandom)
                assert gender_random is not None, "–í–∞—Ä–∏–∞–Ω—Ç –ø–æ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
                gender_random.click()

            with allure.step("–í–≤–æ–¥ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"):
                passport = self.elements_is_visible(Locators.Passport)
                assert passport is not None, "–ü–æ–ª–µ –ø–∞—Å–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                passport.send_keys(person.Passport)

        with allure.step("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"):
            contact_last_name = self.elements_is_visible(Locators.ContactLastName)
            assert contact_last_name is not None, "–ü–æ–ª–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π —Ñ–∞–º–∏–ª–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            contact_last_name.send_keys('–¢–µ—Å—Ç')

            contact_first_name = self.elements_is_visible(Locators.ContactFirstName)
            assert contact_first_name is not None, "–ü–æ–ª–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            contact_first_name.send_keys('–¢–µ—Å—Ç')

            contact_middle_name = self.elements_is_visible(Locators.ContactMiddleName)
            assert contact_middle_name is not None, "–ü–æ–ª–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            contact_middle_name.send_keys('–¢–µ—Å—Ç')

        with allure.step("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –æ—Ñ–µ—Ä—Ç—ã"):
            offer_agreement = self.elements_is_visible(Locators.OfferAgreement)
            assert offer_agreement is not None, "–ß–µ–∫–±–æ–∫—Å —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω"
            offer_agreement.click()
            allure.attach(
                self.driver.get_screenshot_as_png(),
                name="before_booking",
                attachment_type=allure.attachment_type.PNG
            )

        with allure.step("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"):
            Booking_agreement = self.elements_is_visible(Locators.BookingButton)
            assert Booking_agreement is not None, "–ö–Ω–æ–ø–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            Booking_agreement.click()
            allure.attach(
                self.driver.get_screenshot_as_png(),
                name="before_booking",
                attachment_type=allure.attachment_type.PNG
            )
        time.sleep(30)


class TelegramMessage(BasePage):

    def send_telegram_report(self):
        with allure.step("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤ Telegram"):
            bot_token = "7957229168:AAFuNZTokayAlvtztj40bw9-sJaKbpN0j1E"
            chat_id = "1299266461"
            message = self.generate_report_message()

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            text_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
            requests.post(text_url, json={'chat_id': chat_id, 'text': message, 'parse_mode': 'HTML'})


    def generate_report_message(self):
                return f"""
        <b>üìä –û—Ç—á–µ—Ç –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏</b>
        ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {print('–ú–æ—Å–∫–≤–∞')} - {print(Locators.City)}
                ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        <i>{datetime.now().strftime('%d.%m.%Y %H:%M:%S')}</i>
        """
        # with allure.step("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"):
    # <b>–°—Ç–∞—Ç—É—Å:</b> {self.booking_data['status']}
    # <b>–ü–∞—Å—Å–∞–∂–∏—Ä–æ–≤:</b> {self.booking_data['passengers']}
    # <b>–ö–ª–∞—Å—Å:</b> {self.booking_data['flight_type']}
    #  <b>–î–∞—Ç–∞ –ø–µ—Ä–µ–ª–µ—Ç–∞:</b> {self.booking_data['flight_date']}
    #  <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b> {self.['booking_duration']}
    # <b>–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:</b> {self.booking_data['payment_method']}
    # booking_button = self.elements_is_visible(Locators.BookingButton)
    # assert booking_button is not None, "–ö–Ω–æ–ø–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    # booking_button.click()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            #time.sleep(30)
            #with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"):
            #    success_element = self.elements_is_visible(Locators.BookingSuccess, timeout=30)
            #    assert success_element is not None, "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"
             #   assert "—É—Å–ø–µ—à–Ω–æ" in success_element.text.lower(), "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
              #  allure.attach(
               #     self.driver.get_screenshot_as_png(),
                #    name="booking_success",
                 #   attachment_type=allure.attachment_type.PNG
                #)
